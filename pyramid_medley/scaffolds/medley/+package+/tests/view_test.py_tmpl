from pyramid import testing

from pyramid_mailer.mailer import DummyMailer
from pyramid_storage.testing import DummyFileStorage

from webob.multidict import MultiDict


class DummyRedirect(object):

    def __init__(self, route_name, *args, **kwargs):
        self.route_name = route_name
        self.args = args
        self.kwargs = kwargs


class DummyRoute(object):

    def __init__(self, name):
        self.name = name


def make_request(method='GET', post_data=None,
                 get_data=None, params=None, session=None,
                 context=None, user=None, with_csrf=True,
                 route_name=None):

    req = testing.DummyRequest(method=method)
    req.user = user
    req.POST = MultiDict(post_data or {})
    req.GET = MultiDict(get_data or {})
    req.storage = DummyFileStorage()
    req.seeother = DummyRedirect
    req.mailer = DummyMailer()
    req.matched_route = DummyRoute(route_name)

    if params is None:
        params = {}
        params.update(req.GET)
        params.update(req.POST)

    req.params = MultiDict(params or {})
    req.context = context

    session = session or {}
    req.session.update(session)

    if req.method == 'POST' and with_csrf:
        req.POST['csrf_token'] = req.session.get_csrf_token()

    return req


def test_home(db):
    from ..views import home
    assert home(make_request())


def test_logout():
    from ..views import logout
    res = logout(make_request())
    assert res.route_name == 'home'


def test_login_get():
    from ..views import login
    with testing.testConfig() as config:
        config.add_route("login", "/login")
        assert 'form' in login(make_request(route_name='login'))


def test_login_post_invalid(db):
    from ..views import login
    data = {
        'email': 'test@gmail.com',
        'password': 'test',
    }
    with testing.testConfig() as config:
        config.add_route("login", "/login")
        res = login(make_request(
            'POST',
            post_data=data,
            route_name='login'
        ))
        assert 'form' in res


def test_login_post_valid(db):
    from ..views import login
    from .factories import UserFactory
    UserFactory()
    data = {
        'email': 'tester@gmail.com',
        'password': 'test',
    }
    with testing.testConfig() as config:
        config.add_route("login", "/login")
        res = login(make_request(
            'POST',
            post_data=data,
            route_name='login'
        ))
        assert res.route_name == 'home'


def test_signup_get():
    from ..views import signup
    with testing.testConfig() as config:
        config.add_route('signup', '/signup')
        assert 'form' in signup(make_request(route_name='signup'))


def test_signup_post(db):
    from ..models import User
    from ..views import signup
    with testing.testConfig() as config:
        config.add_route('signup', '/signup')
        req = make_request('POST', post_data={
            'first_name': 'test',
            'last_name': 'test',
            'email': 'test@gmail.com',
            'password': 'test',
            'password_confirm': 'test',
            }, route_name='signup')
        res = signup(req)
        assert res.route_name == 'home'
        assert User.query.count() == 1
